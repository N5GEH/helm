replicaCount: 3

image:
  repository: crate
  pullPolicy: IfNotPresent
  tag: "4.6.6"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 4200

ingress:
  enabled: false

resources:
  limits:
    memory: 24000Mi
    cpu: 5

nodeSelector: {}

tolerations: []

affinity: {}

extraVolumes:
  - name: crate-config
    projected:
      sources:
        - configMap:
            name: crate-config
        - configMap:
            name: crate-logsettings

extraVolumeMounts:
  - name: crate-config
    mountPath: /crate/config/crate.yaml
    subPath: crate.yaml
  - name: crate-config
    mountPath: /crate/config/log4j2.properties
    subPath: log4j2.properties

initContainer:
  image: busybox
  command: ["sh", "-c", "sysctl -w vm.max_map_count=262144"]
  securityContext:
    privileged: true
    seLinuxOptions:
      type: spc_t
  env:
    - name: PATH
      value: "/bin:/sbin:/usr/bin:/usr/sbin"

containerArgs:
  - -Cnode.name=$(POD_NAME)
  - -Ccluster.name=${CLUSTER_NAME}
  - -Ccluster.initial_master_nodes=crate-0,crate-1,crate-2
  - -Cdiscovery.seed_providers=srv
  - -Cdiscovery.srv.query=crate-internal-service.${NAMESPACE}.svc.cluster.local
  - -Cgateway.recover_after_nodes=2
  - -Cgateway.expected_nodes=${EXPECTED_NODES}
  - -Cpath.data=/data

env:
  - name: CRATE_HEAP_SIZE
    value: "16000m"
  - name: EXPECTED_NODES
    value: "3"
  - name: CLUSTER_NAME
    value: "my-crate"
  - name: NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name

volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi

configMaps:
  crateConfig: |
    network.host: _local_,_site_
    path:
      logs: /data/log
      data: /data/data
    blobs:
      path: /data/blobs
    auth:
      trust:
        http_default_user: crate
      host_based:
        enabled: true
        config:
          a:
            user: crate
            method: trust

  logSettings: |
    # Crate uses log4j as internal logging abstraction.
    # Configure log4j as you need it to behave by setting the log4j prefixes in
    # this file.
    status = error

    rootLogger.level = info
    rootLogger.appenderRefs = stdout, stderr
    rootLogger.appenderRef.stdout.ref = STDOUT
    rootLogger.appenderRef.stderr.ref = STDERR


    # log action execution errors for easier debugging
    # logger.action.name = org.crate.action.sql
    # logger.action.level = debug

    #  Peer shard recovery
    # logger.indices_recovery.name: indices.recovery
    # logger.indices_recovery.level: DEBUG

    #  Discovery
    #  Crate will discover the other nodes within its own cluster.
    #  If you want to log the discovery process, set the following:
    # logger.discovery.name: discovery
    # logger.discovery.level: TRACE

    # mute amazon s3 client logging a bit
    logger.aws.name = com.amazonaws
    logger.aws.level = warn

    # Define your appenders here.
    # Like mentioned above, use the log4j prefixes to configure for example the
    # type or layout.
    # For all available settings, take a look at the log4j documentation.
    # https://logging.apache.org/log4j/2.x/
    # https://logging.apache.org/log4j/2.x/manual/appenders.html

    # configure stdout
    appender.consoleOut.type = Console
    appender.consoleOut.name = STDOUT
    appender.consoleOut.target = System.out
    appender.consoleOut.direct = true
    appender.consoleOut.layout.type = PatternLayout
    appender.consoleOut.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name] %marker%m%n
    appender.consoleOut.filter.threshold.type = ThresholdFilter
    appender.consoleOut.filter.threshold.level = warn
    appender.consoleOut.filter.threshold.onMatch = DENY
    appender.consoleOut.filter.threshold.onMismatch = ACCEPT

    # configure stderr
    appender.consoleErr.type = Console
    appender.consoleErr.name = STDERR
    appender.consoleErr.target = SYSTEM_ERR
    appender.consoleErr.direct = true
    appender.consoleErr.layout.type = PatternLayout
    appender.consoleErr.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name] %marker%m%n
    appender.consoleErr.filter.threshold.type = ThresholdFilter
    appender.consoleErr.filter.threshold.level = warn
    appender.consoleErr.filter.threshold.onMatch = ACCEPT
    appender.consoleErr.filter.threshold.onMismatch = DENY

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
